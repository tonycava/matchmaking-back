// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  profilePicture String?
  hashedPassword String
  role           Role     @default(USER)
  private        Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  winnerGames    Game[]   @relation("winner")
  loserGames     Game[]   @relation("loser")
  chats          Chat[]
  followers      Follow[] @relation("follower")
  followed       Follow[] @relation("followed")

  toFollow         Application[] @relation("toFollow")
  whoFollow        Application[] @relation("whoFollow")
  personWhoSend    Direct[]      @relation("personWhoSend")
  personWhoRecived Direct[]      @relation("personWhoRecived")
}

model Game {
  id        String   @id
  createdAt DateTime @default(now())
  winner    User?    @relation("winner", fields: [winnerId], references: [id])
  winnerId  String?
  loser     User?    @relation("loser", fields: [loserId], references: [id])
  loserId   String?
}

model Chat {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Follow {
  id         String @id @default(uuid())
  follower   User   @relation("follower", fields: [followerId], references: [id])
  followerId String
  followed   User   @relation("followed", fields: [followedId], references: [id])
  followedId String
}

model Application {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  userToFollow    User     @relation("toFollow", fields: [userIdToFollow], references: [id])
  userIdToFollow  String
  userWhoFollow   User     @relation("whoFollow", fields: [userIdWhoFollow], references: [id])
  userIdWhoFollow String
}

model Direct {
  id                 String   @id @default(uuid())
  createdAt          DateTime @default(now())
  personWhoSend      User     @relation("personWhoSend", fields: [personWhoSendId], references: [id])
  personWhoSendId    String
  personWhoRecived   User     @relation("personWhoRecived", fields: [personWhoRecivedId], references: [id])
  personWhoRecivedId String
  content            String
}

enum Role {
  ADMIN
  USER
}
